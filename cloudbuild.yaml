steps:
# Step 1: Delete Docker Images
- name: 'google/cloud-sdk:latest'
  id: 'Delete Docker Images'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      set -x  # Enable debugging
      echo "Deleting Docker images from Google Container Registry..."
      # List Docker images and delete them
      IMAGES=$(gcloud container images list --format='get(uri)')
      for IMAGE in $IMAGES; do
        if gcloud container images delete "$IMAGE" --force-delete-tags --quiet; then
          echo "Successfully deleted Docker image: $IMAGE"
        else
          echo "Failed to delete Docker image: $IMAGE"
          exit 1
        fi
      done

# Step 2: Delete Deployment Configurations
- name: 'google/cloud-sdk:latest'
  id: 'Delete Deployment Configurations'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      set -x  # Enable debugging
      echo "Deleting deployment resources..."
      DELIVERY_PIPELINE="gke-cicd-pipeline"
      REGION="us-central1"
      
      # Delete deployment releases
      RELEASES=$(gcloud deploy releases list --delivery-pipeline=$DELIVERY_PIPELINE --region=$REGION --format='value(name)')
      for RELEASE in $RELEASES; do
        if gcloud deploy releases delete "$RELEASE" --delivery-pipeline=$DELIVERY_PIPELINE --region=$REGION --quiet; then
          echo "Successfully deleted deployment release: $RELEASE"
        else
          echo "Failed to delete deployment release: $RELEASE"
          exit 1
        fi
      done
      
      # Delete pipeline configurations
      CONFIG_FILES=("deploy/pipeline.yaml" "deploy/dev.yaml")
      for FILE in "${CONFIG_FILES[@]}"; do
        if [ -f "$FILE" ]; then
          if gcloud deploy apply --file "$FILE" --region=$REGION --delete; then
            echo "Successfully deleted configuration: $FILE"
          else
            echo "Failed to delete configuration: $FILE"
            exit 1
          fi
        else
          echo "Configuration file not found: $FILE"
        fi
      done

# Optional Step: Clean Up Cloud Storage Buckets
- name: 'google/cloud-sdk:latest'
  id: 'Clean Up Cloud Storage Buckets'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      set -x  # Enable debugging
      echo "Cleaning up Cloud Storage buckets..."
      BUCKETS=$(gsutil ls)
      for BUCKET in $BUCKETS; do
        if gsutil rm -r "$BUCKET"; then
          echo "Successfully deleted bucket: $BUCKET"
        else
          echo "Failed to delete bucket: $BUCKET"
          exit 1
        fi
      done

# Optional Step: Clean Up Additional Resources
- name: 'google/cloud-sdk:latest'
  id: 'Clean Up Additional Resources'
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      set -x  # Enable debugging
      echo "Performing additional clean-up tasks..."
      # Add additional clean-up tasks here
      # For example, deleting any other project-specific resources or configurations
      # Customize as needed
  waitFor: ['Clean Up Cloud Storage Buckets']

options:
  logging: CLOUD_LOGGING_ONLY
